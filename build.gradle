/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'andreas' at '28.12.16 02:25' with Gradle 3.2.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.2.1/userguide/tutorial_java_projects.html
 */
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'

apply plugin: 'idea'
apply plugin: 'application'

apply plugin: 'com.github.johnrengelman.shadow'




mainClassName = 'de.fynder.jtransfer.Main'
version = '0.3'
// sourceCompatibility = 1.8

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
        }
    }

    test {
        java {
            srcDir 'src/test/java'
        }
    }
}
// In this section you declare the dependencies for your production and test code
dependencies {
    // classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'

    // The production code uses the SLF4J logging API at compile time
    compile(
            'org.slf4j:slf4j-api:1.7.21',
            'com.beust:jcommander:1.+'

            // ,'com.googlecode.json-simple:json-simple:1.1'

    )
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile (
            'junit:junit:4.12',
            'org.mockito:mockito-core:2.+'
    )
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}




shadowJar {
    baseName = 'jtransfer'
    classifier = null
    version = null
}


// task fatCapsule(type: Jar, dependsOn: jar) {
task all(dependsOn: project.tasks.shadowJar) {
    def integratedShellScript = "build/libs/jtransfer"
    def fatJarFile = "build/libs/${project.tasks.shadowJar.archiveName}"
    // (new File('xxxoutput')).text = file('shell-wrapper.sh').getText() + file(fatJarFile).getText()
    doLast {
        file(integratedShellScript).delete()

        def f = new File(integratedShellScript)
        f.append(file('build-tools/shell-wrapper.sh').getText())
        f.append(file(fatJarFile).getBytes())
    }
}

task releaseLinuxUnixMacOS(type: Zip, dependsOn:project.tasks.all) {
    from 'build/libs/'
    include 'jtransfer'
    archiveName 'jtransfer-linux_unix_macos.zip'
    destinationDir(file("build/release/${project.version}/"))
}

task releaseWin(type: Zip, dependsOn:project.tasks.all) {
    from 'build-tools/'
    include 'jtransfer.bat'
    from 'build'
    include 'libs/jtransfer.jar'
    archiveName 'jtransfer-win.zip'
    destinationDir(file("build/release/${project.version}/"))
}

task releaseJarOnly(type: Zip, dependsOn:project.tasks.all) {
    from 'build/libs/'
    include 'jtransfer.jar'
    archiveName 'jtransfer-jar_only.zip'
    destinationDir(file("build/release/${project.version}/"))
}

task release() {
    dependsOn 'releaseLinuxUnixMacOS'
    dependsOn 'releaseWin'
    dependsOn 'releaseJarOnly'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3' //we want gradle 2.10 to run this project
}